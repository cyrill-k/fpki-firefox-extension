package cache_v2

import (
	"testing"

	"github.com/netsec-ethz/fpki/pkg/common"
	mapCommon "github.com/netsec-ethz/fpki/pkg/mapserver/common"
	"github.com/stretchr/testify/require"
)

func TestVerifyProof(t *testing.T) {
	initSuccess := InitializeMapserverInfoCache("embedded/unit_test/validation/config.json")
	require.True(t, initSuccess)

	// PoP success
	proofCache = map[string]*ProofCacheEntry{}
	r, cIDs, pIDs := CreatePoPMapserverResponse()
	cacheKey, err := AddMapServerResponseToCacheIfNecessary(r, cIDs, pIDs, "local-mapserver")
	require.NoError(t, err)
	require.NotEmpty(t, cacheKey)
	e := VerifyProof(cacheKey)
	require.NotNil(t, e)
	require.True(t, e.evaluated)
	require.True(t, e.result)

	// PoA (default leaf parent) success
	proofCache = map[string]*ProofCacheEntry{}
	r, cIDs, pIDs = CreatePoADefaultParentLeafMapserverResponse()
	cacheKey, err = AddMapServerResponseToCacheIfNecessary(r, cIDs, pIDs, "local-mapserver")
	require.NoError(t, err)
	require.NotEmpty(t, cacheKey)
	e = VerifyProof(cacheKey)
	require.NotNil(t, e)
	require.True(t, e.evaluated)
	require.True(t, e.result)

	// PoA (non-empty leaf parent) success
	proofCache = map[string]*ProofCacheEntry{}
	r, cIDs, pIDs = CreatePoAExistingParentLeafMapserverResponse()
	cacheKey, err = AddMapServerResponseToCacheIfNecessary(r, cIDs, pIDs, "local-mapserver")
	require.NoError(t, err)
	require.NotEmpty(t, cacheKey)
	e = VerifyProof(cacheKey)
	require.NotNil(t, e)
	require.True(t, e.evaluated)
	require.True(t, e.result)

	// failure (missing cert ID)
	proofCache = map[string]*ProofCacheEntry{}
	r, cIDs, pIDs = CreatePoPMapserverResponse()
	cIDs = cIDs[:len(cIDs)-1]
	cacheKey, err = AddMapServerResponseToCacheIfNecessary(r, cIDs, pIDs, "local-mapserver")
	require.NoError(t, err)
	require.NotEmpty(t, cacheKey)
	e = VerifyProof(cacheKey)
	require.NotNil(t, e)
	require.True(t, e.evaluated)
	require.False(t, e.result)

	// failure (provide non-inclusion proof with a non-empty set of IDs)
	proofCache = map[string]*ProofCacheEntry{}
	r, cIDs, pIDs = CreatePoADefaultParentLeafMapserverResponse()
	cIDs = []*common.SHA256Output{(*common.SHA256Output)([]byte{23, 159, 188, 20, 138, 61, 208, 15, 210, 78, 161, 52, 88, 204, 67, 191, 167, 245, 156, 129, 130, 215, 131, 165, 19, 246, 235, 236, 16, 12, 137, 36})}
	cacheKey, err = AddMapServerResponseToCacheIfNecessary(r, cIDs, pIDs, "local-mapserver")
	require.NoError(t, err)
	require.NotEmpty(t, cacheKey)
	e = VerifyProof(cacheKey)
	require.NotNil(t, e)
	require.True(t, e.evaluated)
	require.False(t, e.result)

	// failure (wrong PoP)
	proofCache = map[string]*ProofCacheEntry{}
	r, cIDs, pIDs = CreatePoPMapserverResponse()
	r.PoI.Proof[0][0] = 42
	cacheKey, err = AddMapServerResponseToCacheIfNecessary(r, cIDs, pIDs, "local-mapserver")
	require.NoError(t, err)
	require.NotEmpty(t, cacheKey)
	e = VerifyProof(cacheKey)
	require.NotNil(t, e)
	require.True(t, e.evaluated)
	require.False(t, e.result)

	// failure (wrong PoA)
	proofCache = map[string]*ProofCacheEntry{}
	r, cIDs, pIDs = CreatePoADefaultParentLeafMapserverResponse()
	r.PoI.Proof[0][0] = 42
	cacheKey, err = AddMapServerResponseToCacheIfNecessary(r, cIDs, pIDs, "local-mapserver")
	require.NoError(t, err)
	require.NotEmpty(t, cacheKey)
	e = VerifyProof(cacheKey)
	require.NotNil(t, e)
	require.True(t, e.evaluated)
	require.False(t, e.result)

	// failure (wrong tree head signature)
	proofCache = map[string]*ProofCacheEntry{}
	r, cIDs, pIDs = CreatePoPMapserverResponse()
	r.TreeHeadSig[0] = 42
	cacheKey, err = AddMapServerResponseToCacheIfNecessary(r, cIDs, pIDs, "local-mapserver")
	require.NoError(t, err)
	require.NotEmpty(t, cacheKey)
	e = VerifyProof(cacheKey)
	require.NotNil(t, e)
	require.True(t, e.evaluated)
	require.False(t, e.result)
}

func CreatePoAExistingParentLeafMapserverResponse() (mapCommon.MapServerResponse, []*common.SHA256Output, []*common.SHA256Output) {
	response := mapCommon.MapServerResponse{
		DomainEntry: &mapCommon.DomainEntry{
			DomainName:  "cdn.cookielaw.org",
			DomainID:    (*common.SHA256Output)([]byte{176, 225, 240, 151, 131, 90, 96, 96, 122, 170, 128, 93, 141, 16, 216, 229, 84, 165, 186, 37, 13, 246, 206, 124, 162, 148, 32, 211, 159, 160, 62, 112}),
			DomainValue: nil,
			CertIDsID:   nil,
			CertIDs:     nil,
			PolicyIDsID: nil,
			PolicyIDs:   nil,
		},
		PoI: mapCommon.PoI{
			ProofType:  mapCommon.PoA,
			Proof:      [][]byte{{58, 244, 252, 225, 71, 119, 186, 193, 27, 69, 240, 72, 110, 184, 199, 139, 82, 10, 79, 96, 155, 16, 39, 142, 75, 66, 196, 160, 59, 89, 254, 114}, {67, 60, 210, 159, 9, 18, 6, 202, 127, 161, 132, 196, 213, 122, 23, 117, 163, 75, 251, 174, 243, 70, 151, 165, 169, 194, 232, 190, 170, 189, 18, 107}, {19, 107, 73, 215, 4, 81, 188, 156, 168, 198, 26, 69, 60, 69, 140, 167, 59, 14, 229, 249, 193, 93, 174, 220, 196, 196, 53, 166, 7, 213, 216, 151}, {229, 51, 94, 188, 186, 62, 255, 44, 108, 175, 144, 242, 129, 104, 77, 123, 158, 147, 66, 242, 158, 145, 117, 13, 159, 222, 13, 19, 109, 147, 64, 136}, {16, 122, 9, 105, 250, 143, 152, 70, 247, 156, 174, 134, 201, 38, 217, 3, 31, 73, 101, 111, 195, 159, 110, 3, 36, 238, 247, 163, 160, 219, 19, 213}, {85, 64, 242, 35, 124, 156, 44, 173, 200, 68, 40, 157, 73, 62, 78, 23, 187, 99, 212, 27, 72, 253, 117, 96, 253, 226, 81, 50, 85, 252, 193, 86}, {235, 221, 218, 183, 143, 195, 152, 14, 38, 170, 253, 139, 250, 242, 94, 79, 49, 190, 160, 41, 33, 26, 223, 150, 240, 57, 15, 206, 245, 23, 30, 46}, {146, 84, 88, 93, 109, 222, 99, 46, 223, 74, 228, 29, 41, 73, 113, 253, 222, 251, 73, 87, 121, 54, 41, 100, 47, 175, 12, 43, 212, 76, 154, 128}, {20, 88, 150, 202, 253, 32, 118, 206, 76, 8, 211, 249, 184, 67, 184, 77, 7, 193, 157, 136, 192, 143, 180, 226, 120, 252, 84, 159, 118, 109, 104, 199}, {10, 121, 95, 40, 70, 122, 6, 90, 212, 187, 146, 118, 186, 183, 35, 21, 76, 147, 147, 69, 126, 120, 164, 30, 177, 205, 250, 235, 249, 182, 143, 141}, {51, 156, 35, 71, 130, 135, 65, 9, 211, 157, 250, 8, 206, 148, 36, 166, 179, 66, 42, 45, 44, 154, 82, 32, 7, 132, 130, 177, 48, 82, 119, 122}, {17, 122, 74, 204, 110, 121, 106, 227, 90, 180, 218, 236, 166, 101, 63, 202, 235, 1, 105, 111, 107, 4, 14, 213, 105, 129, 242, 11, 46, 253, 99, 218}, {104, 161, 125, 106, 252, 31, 211, 239, 207, 71, 111, 182, 30, 116, 129, 204, 145, 47, 42, 31, 116, 63, 82, 94, 244, 12, 155, 216, 75, 250, 106, 201}, {177, 130, 178, 86, 34, 197, 49, 102, 146, 64, 154, 120, 0, 19, 51, 94, 75, 190, 133, 246, 181, 149, 141, 177, 31, 196, 32, 163, 227, 64, 221, 65}, {253, 130, 193, 17, 142, 137, 93, 69, 61, 204, 213, 18, 170, 55, 121, 19, 193, 29, 106, 160, 66, 253, 106, 102, 106, 13, 62, 209, 108, 63, 158, 23}},
			Root:       []byte{38, 149, 187, 170, 157, 126, 38, 33, 91, 209, 219, 255, 131, 47, 66, 63, 216, 9, 163, 200, 90, 238, 253, 67, 214, 133, 53, 238, 10, 53, 219, 247},
			ProofKey:   []byte{176, 224, 220, 83, 17, 18, 27, 192, 55, 23, 149, 141, 21, 222, 101, 143, 88, 145, 126, 152, 2, 200, 9, 103, 173, 137, 83, 75, 65, 183, 1, 194},
			ProofValue: []byte{8, 140, 208, 59, 240, 168, 90, 12, 190, 190, 150, 226, 153, 106, 127, 80, 250, 189, 124, 107, 137, 58, 167, 152, 29, 42, 198, 81, 58, 26, 66, 93},
		},
		TreeHeadSig: []byte{158, 7, 12, 16, 33, 137, 151, 108, 211, 58, 96, 186, 4, 160, 203, 148, 61, 68, 241, 76, 198, 69, 174, 17, 156, 145, 194, 21, 193, 159, 115, 126, 214, 152, 60, 73, 150, 124, 156, 109, 131, 204, 77, 131, 139, 216, 206, 105, 94, 61, 168, 255, 231, 48, 130, 161, 101, 58, 231, 86, 173, 155, 158, 186, 185, 151, 171, 222, 245, 156, 104, 146, 252, 174, 40, 52, 144, 37, 251, 129, 7, 75, 6, 126, 106, 3, 166, 4, 203, 15, 190, 78, 69, 235, 159, 6, 0, 252, 204, 118, 13, 123, 142, 83, 163, 59, 13, 76, 131, 231, 91, 70, 190, 98, 123, 27, 161, 184, 142, 152, 172, 112, 93, 48, 7, 181, 127, 51, 23, 191, 157, 186, 48, 204, 4, 233, 17, 69, 167, 132, 18, 92, 114, 8, 198, 184, 14, 191, 189, 136, 172, 179, 137, 164, 2, 241, 208, 113, 97, 255, 250, 124, 204, 68, 138, 27, 241, 21, 121, 49, 250, 135, 84, 166, 246, 93, 39, 70, 64, 141, 228, 134, 50, 83, 31, 196, 139, 178, 255, 57, 53, 65, 204, 245, 18, 39, 190, 159, 65, 193, 244, 8, 224, 133, 244, 178, 94, 52, 74, 210, 104, 61, 94, 72, 65, 8, 200, 188, 129, 96, 145, 128, 88, 46, 60, 22, 27, 219, 15, 83, 166, 99, 81, 150, 167, 187, 37, 175, 199, 146, 209, 201, 13, 107, 211, 130, 225, 142, 57, 157, 90, 61, 176, 39, 38, 82},
	}
	certIDs := []*common.SHA256Output{}
	policyIDs := []*common.SHA256Output{}
	return response, certIDs, policyIDs
}

func CreatePoADefaultParentLeafMapserverResponse() (mapCommon.MapServerResponse, []*common.SHA256Output, []*common.SHA256Output) {
	response := mapCommon.MapServerResponse{
		DomainEntry: &mapCommon.DomainEntry{
			DomainName:  "cookielaw.org",
			DomainID:    (*common.SHA256Output)([]byte{222, 65, 210, 11, 73, 77, 211, 167, 165, 34, 31, 2, 17, 112, 145, 173, 82, 127, 76, 54, 100, 191, 237, 205, 98, 22, 22, 77, 34, 151, 222, 139}),
			DomainValue: nil,
			CertIDsID:   nil,
			CertIDs:     nil,
			PolicyIDsID: nil,
			PolicyIDs:   nil,
		},
		PoI: mapCommon.PoI{
			ProofType:  mapCommon.PoA,
			Proof:      [][]byte{{253, 110, 180, 13, 33, 168, 80, 6, 139, 31, 22, 22, 166, 52, 202, 44, 120, 193, 111, 241, 218, 82, 4, 33, 151, 61, 16, 67, 51, 244, 41, 13}, {79, 59, 115, 194, 247, 80, 72, 66, 238, 162, 5, 76, 126, 189, 65, 133, 93, 52, 157, 147, 198, 11, 33, 117, 172, 228, 150, 43, 3, 239, 2, 39}, {112, 251, 179, 147, 219, 65, 110, 151, 230, 172, 219, 249, 124, 156, 213, 136, 153, 107, 93, 28, 29, 122, 45, 75, 6, 207, 35, 223, 96, 145, 220, 145}, {161, 75, 143, 176, 201, 72, 16, 150, 106, 222, 188, 175, 100, 125, 253, 52, 174, 157, 102, 22, 169, 110, 82, 31, 117, 173, 24, 58, 134, 5, 181, 45}, {158, 83, 45, 70, 18, 79, 49, 88, 45, 201, 255, 29, 53, 228, 54, 228, 38, 237, 67, 137, 34, 4, 9, 84, 243, 44, 176, 39, 29, 32, 118, 92}, {57, 205, 149, 147, 155, 252, 21, 213, 101, 118, 189, 1, 67, 138, 111, 49, 34, 72, 81, 125, 60, 151, 152, 91, 89, 254, 151, 232, 67, 160, 158, 56}, {247, 103, 241, 209, 220, 86, 215, 186, 82, 148, 140, 213, 10, 137, 69, 248, 206, 94, 191, 109, 29, 173, 97, 135, 216, 148, 229, 210, 15, 116, 70, 167}, {77, 139, 109, 171, 133, 238, 169, 113, 117, 17, 45, 113, 87, 102, 52, 238, 237, 35, 189, 2, 14, 163, 16, 79, 67, 123, 17, 117, 40, 36, 45, 148}, {104, 182, 163, 248, 10, 60, 94, 246, 128, 25, 24, 86, 233, 224, 204, 156, 217, 32, 159, 3, 146, 43, 30, 57, 183, 239, 122, 203, 105, 228, 51, 71}, {23, 2, 143, 4, 104, 204, 136, 58, 137, 96, 101, 182, 173, 223, 161, 152, 66, 223, 208, 77, 97, 171, 78, 28, 136, 83, 67, 61, 175, 14, 113, 158}, {32, 101, 83, 207, 244, 154, 63, 240, 40, 197, 200, 57, 36, 55, 214, 55, 22, 80, 2, 95, 105, 101, 195, 6, 66, 246, 229, 26, 252, 47, 99, 165}, {255, 12, 7, 235, 167, 62, 180, 203, 21, 184, 180, 48, 34, 94, 165, 196, 146, 213, 76, 53, 252, 18, 219, 16, 56, 99, 202, 33, 105, 188, 86, 85}, {136, 122, 147, 148, 206, 23, 199, 34, 196, 91, 141, 250, 78, 88, 103, 114, 50, 153, 175, 178, 110, 56, 17, 89, 128, 4, 117, 252, 146, 29, 4, 19}, {152, 181, 236, 139, 31, 202, 152, 45, 16, 88, 160, 106, 234, 170, 93, 160, 201, 150, 158, 90, 19, 140, 81, 80, 198, 91, 57, 197, 101, 25, 194, 70}, {253, 130, 193, 17, 142, 137, 93, 69, 61, 204, 213, 18, 170, 55, 121, 19, 193, 29, 106, 160, 66, 253, 106, 102, 106, 13, 62, 209, 108, 63, 158, 23}},
			Root:       []byte{38, 149, 187, 170, 157, 126, 38, 33, 91, 209, 219, 255, 131, 47, 66, 63, 216, 9, 163, 200, 90, 238, 253, 67, 214, 133, 53, 238, 10, 53, 219, 247},
			ProofKey:   nil,
			ProofValue: nil,
		},
		TreeHeadSig: []byte{158, 7, 12, 16, 33, 137, 151, 108, 211, 58, 96, 186, 4, 160, 203, 148, 61, 68, 241, 76, 198, 69, 174, 17, 156, 145, 194, 21, 193, 159, 115, 126, 214, 152, 60, 73, 150, 124, 156, 109, 131, 204, 77, 131, 139, 216, 206, 105, 94, 61, 168, 255, 231, 48, 130, 161, 101, 58, 231, 86, 173, 155, 158, 186, 185, 151, 171, 222, 245, 156, 104, 146, 252, 174, 40, 52, 144, 37, 251, 129, 7, 75, 6, 126, 106, 3, 166, 4, 203, 15, 190, 78, 69, 235, 159, 6, 0, 252, 204, 118, 13, 123, 142, 83, 163, 59, 13, 76, 131, 231, 91, 70, 190, 98, 123, 27, 161, 184, 142, 152, 172, 112, 93, 48, 7, 181, 127, 51, 23, 191, 157, 186, 48, 204, 4, 233, 17, 69, 167, 132, 18, 92, 114, 8, 198, 184, 14, 191, 189, 136, 172, 179, 137, 164, 2, 241, 208, 113, 97, 255, 250, 124, 204, 68, 138, 27, 241, 21, 121, 49, 250, 135, 84, 166, 246, 93, 39, 70, 64, 141, 228, 134, 50, 83, 31, 196, 139, 178, 255, 57, 53, 65, 204, 245, 18, 39, 190, 159, 65, 193, 244, 8, 224, 133, 244, 178, 94, 52, 74, 210, 104, 61, 94, 72, 65, 8, 200, 188, 129, 96, 145, 128, 88, 46, 60, 22, 27, 219, 15, 83, 166, 99, 81, 150, 167, 187, 37, 175, 199, 146, 209, 201, 13, 107, 211, 130, 225, 142, 57, 157, 90, 61, 176, 39, 38, 82},
	}
	certIDs := []*common.SHA256Output{}
	policyIDs := []*common.SHA256Output{}
	return response, certIDs, policyIDs
}

func CreatePoPMapserverResponse() (mapCommon.MapServerResponse, []*common.SHA256Output, []*common.SHA256Output) {
	response := mapCommon.MapServerResponse{
		DomainEntry: &mapCommon.DomainEntry{
			DomainName:  "baidu.com",
			DomainID:    (*common.SHA256Output)([]byte{121, 161, 35, 82, 99, 77, 26, 21, 136, 182, 57, 211, 202, 81, 64, 183, 27, 200, 62, 21, 91, 73, 31, 182, 164, 148, 12, 28, 143, 190, 159, 219}),
			DomainValue: (*common.SHA256Output)([]byte{183, 197, 162, 10, 144, 181, 133, 140, 129, 187, 57, 106, 120, 219, 98, 116, 156, 20, 168, 64, 123, 214, 214, 157, 137, 164, 41, 227, 93, 20, 138, 232}),
			CertIDsID:   nil,
			CertIDs:     []byte{23, 159, 188, 20, 138, 61, 208, 15, 210, 78, 161, 52, 88, 204, 67, 191, 167, 245, 156, 129, 130, 215, 131, 165, 19, 246, 235, 236, 16, 12, 137, 36, 67, 72, 160, 233, 68, 76, 120, 203, 38, 94, 5, 141, 94, 137, 68, 180, 216, 79, 150, 98, 189, 38, 219, 37, 127, 137, 52, 164, 67, 199, 1, 97, 77, 111, 228, 35, 18, 14, 208, 83, 116, 108, 172, 190, 38, 97, 152, 202, 182, 56, 170, 45, 10, 3, 176, 60, 129, 120, 171, 23, 38, 61, 135, 55, 100, 154, 15, 78, 67, 65, 106, 135, 91, 97, 203, 46, 126, 194, 196, 166, 103, 4, 195, 98, 193, 54, 192, 45, 174, 229, 17, 21, 94, 61, 154, 90, 103, 103, 156, 178, 106, 110, 237, 118, 230, 107, 141, 28, 3, 191, 60, 179, 94, 177, 151, 191, 60, 183, 128, 31, 189, 154, 43, 170, 114, 140, 84, 147, 112, 245, 10, 10, 14, 57, 103, 124, 13, 25, 22, 37, 189, 217, 219, 47, 31, 228, 35, 133, 68, 2, 177, 39, 175, 114, 26, 252, 131, 148, 130, 224, 135, 199, 21, 83, 68, 94, 179, 195, 60, 62, 7, 16, 113, 27, 153, 233, 199, 119, 63, 4, 217, 26, 195, 138, 159, 76, 8, 46, 226, 65, 1, 234, 166, 108, 151, 174, 89, 223, 249, 234, 1, 94, 115, 199, 68, 238, 85, 32, 116, 95, 16, 26, 57, 92, 73, 125, 25, 225, 241, 104, 211, 154, 252, 208, 179, 123, 104, 51, 8, 126, 159, 4, 19, 55, 168, 7, 170, 224, 164, 26, 78, 205, 87, 245, 219, 29, 166, 36, 158, 194, 151, 83, 34, 177, 93, 85, 182, 118, 255, 163, 23, 158, 136, 18, 9, 58, 27, 94, 175, 238, 135, 106, 231, 166, 170, 242, 49, 7, 141, 173, 27, 251, 33, 205, 40, 147, 118, 74, 203, 181, 34, 215, 183, 241, 39, 173, 106, 1, 19, 134, 91, 223, 28, 212, 16, 46, 125, 7, 89, 175, 99, 90, 124, 244, 114, 13, 201, 99, 197, 59, 237, 126, 185, 81, 19, 137, 48, 4, 23, 172, 241, 76, 79, 2, 90, 134, 148, 34, 211, 238, 26, 119, 18, 122, 226, 118, 42, 42, 61, 40, 137, 207},
			PolicyIDsID: nil,
			PolicyIDs:   []byte{202, 127, 108, 161, 26, 10, 255, 75, 6, 41, 194, 163, 66, 96, 92, 111, 103, 102, 232, 60, 164, 108, 230, 35, 64, 34, 153, 209, 78, 140, 63, 237, 202, 127, 108, 161, 26, 10, 255, 75, 6, 41, 194, 163, 66, 96, 92, 111, 103, 102, 232, 60, 164, 108, 230, 35, 64, 34, 153, 209, 78, 140, 63, 237, 202, 127, 108, 161, 26, 10, 255, 75, 6, 41, 194, 163, 66, 96, 92, 111, 103, 102, 232, 60, 164, 108, 230, 35, 64, 34, 153, 209, 78, 140, 63, 237, 202, 127, 108, 161, 26, 10, 255, 75, 6, 41, 194, 163, 66, 96, 92, 111, 103, 102, 232, 60, 164, 108, 230, 35, 64, 34, 153, 209, 78, 140, 63, 237, 202, 127, 108, 161, 26, 10, 255, 75, 6, 41, 194, 163, 66, 96, 92, 111, 103, 102, 232, 60, 164, 108, 230, 35, 64, 34, 153, 209, 78, 140, 63, 237, 202, 127, 108, 161, 26, 10, 255, 75, 6, 41, 194, 163, 66, 96, 92, 111, 103, 102, 232, 60, 164, 108, 230, 35, 64, 34, 153, 209, 78, 140, 63, 237, 202, 127, 108, 161, 26, 10, 255, 75, 6, 41, 194, 163, 66, 96, 92, 111, 103, 102, 232, 60, 164, 108, 230, 35, 64, 34, 153, 209, 78, 140, 63, 237, 202, 127, 108, 161, 26, 10, 255, 75, 6, 41, 194, 163, 66, 96, 92, 111, 103, 102, 232, 60, 164, 108, 230, 35, 64, 34, 153, 209, 78, 140, 63, 237, 202, 127, 108, 161, 26, 10, 255, 75, 6, 41, 194, 163, 66, 96, 92, 111, 103, 102, 232, 60, 164, 108, 230, 35, 64, 34, 153, 209, 78, 140, 63, 237, 202, 127, 108, 161, 26, 10, 255, 75, 6, 41, 194, 163, 66, 96, 92, 111, 103, 102, 232, 60, 164, 108, 230, 35, 64, 34, 153, 209, 78, 140, 63, 237, 202, 127, 108, 161, 26, 10, 255, 75, 6, 41, 194, 163, 66, 96, 92, 111, 103, 102, 232, 60, 164, 108, 230, 35, 64, 34, 153, 209, 78, 140, 63, 237, 202, 127, 108, 161, 26, 10, 255, 75, 6, 41, 194, 163, 66, 96, 92, 111, 103, 102, 232, 60, 164, 108, 230, 35, 64, 34, 153, 209, 78, 140, 63, 237},
		},
		PoI: mapCommon.PoI{
			ProofType:  mapCommon.PoP,
			Proof:      [][]byte{{33, 58, 252, 128, 105, 61, 155, 200, 228, 42, 86, 91, 9, 170, 142, 115, 216, 92, 48, 87, 195, 115, 50, 21, 237, 34, 196, 197, 10, 10, 64, 132}, {0}, {51, 3, 129, 121, 184, 12, 46, 94, 174, 242, 202, 110, 182, 188, 184, 123, 71, 21, 14, 227, 22, 64, 86, 7, 45, 4, 116, 92, 221, 13, 30, 68}, {253, 89, 173, 209, 20, 83, 13, 51, 235, 173, 234, 54, 224, 78, 11, 149, 211, 101, 164, 148, 89, 45, 94, 192, 240, 161, 121, 249, 52, 117, 23, 143}, {123, 133, 145, 201, 217, 161, 106, 47, 225, 163, 252, 3, 102, 232, 206, 140, 149, 133, 132, 183, 186, 231, 69, 173, 152, 98, 50, 237, 153, 216, 68, 132}, {228, 152, 200, 50, 155, 53, 58, 38, 130, 223, 228, 52, 75, 234, 188, 107, 176, 44, 175, 66, 36, 222, 185, 149, 218, 168, 69, 12, 175, 243, 91, 119}, {80, 11, 73, 212, 12, 42, 128, 183, 49, 90, 198, 157, 144, 131, 70, 25, 138, 1, 9, 114, 81, 138, 36, 224, 189, 38, 9, 243, 24, 26, 164, 157}, {150, 237, 118, 136, 16, 247, 178, 166, 18, 1, 81, 195, 116, 116, 85, 226, 58, 236, 118, 105, 35, 237, 184, 229, 37, 152, 46, 58, 131, 230, 16, 195}, {67, 232, 50, 218, 88, 191, 211, 56, 43, 205, 113, 242, 28, 164, 46, 179, 101, 120, 22, 185, 226, 13, 253, 167, 154, 89, 180, 19, 62, 126, 95, 174}, {8, 76, 171, 151, 246, 44, 7, 12, 56, 255, 9, 189, 65, 96, 128, 204, 157, 154, 109, 140, 68, 97, 105, 131, 34, 84, 46, 89, 212, 239, 231, 148}, {92, 66, 173, 18, 163, 90, 150, 117, 1, 141, 221, 178, 145, 140, 130, 60, 138, 140, 164, 250, 7, 68, 77, 99, 211, 62, 170, 171, 65, 166, 122, 173}, {162, 52, 85, 62, 42, 192, 91, 160, 144, 74, 23, 122, 211, 183, 155, 149, 187, 220, 53, 137, 132, 40, 101, 255, 158, 218, 51, 140, 126, 12, 123, 75}, {144, 118, 160, 255, 10, 187, 77, 54, 147, 204, 198, 123, 189, 55, 14, 252, 185, 204, 72, 101, 66, 107, 244, 208, 54, 83, 75, 171, 239, 147, 117, 162}, {234, 137, 110, 231, 43, 242, 144, 26, 218, 158, 13, 97, 24, 128, 245, 180, 66, 228, 91, 68, 232, 99, 165, 242, 20, 87, 154, 29, 250, 25, 24, 119}, {124, 222, 65, 12, 135, 12, 100, 115, 116, 163, 217, 219, 104, 247, 218, 245, 108, 121, 13, 240, 5, 114, 249, 177, 66, 17, 139, 103, 132, 251, 101, 171}, {76, 60, 87, 218, 55, 13, 100, 191, 74, 77, 31, 65, 211, 95, 130, 95, 205, 131, 242, 76, 211, 150, 238, 119, 140, 33, 63, 230, 0, 206, 190, 89}},
			Root:       []byte{38, 149, 187, 170, 157, 126, 38, 33, 91, 209, 219, 255, 131, 47, 66, 63, 216, 9, 163, 200, 90, 238, 253, 67, 214, 133, 53, 238, 10, 53, 219, 247},
			ProofKey:   []byte{},
			ProofValue: []byte{183, 197, 162, 10, 144, 181, 133, 140, 129, 187, 57, 106, 120, 219, 98, 116, 156, 20, 168, 64, 123, 214, 214, 157, 137, 164, 41, 227, 93, 20, 138, 232},
		},
		TreeHeadSig: []byte{158, 7, 12, 16, 33, 137, 151, 108, 211, 58, 96, 186, 4, 160, 203, 148, 61, 68, 241, 76, 198, 69, 174, 17, 156, 145, 194, 21, 193, 159, 115, 126, 214, 152, 60, 73, 150, 124, 156, 109, 131, 204, 77, 131, 139, 216, 206, 105, 94, 61, 168, 255, 231, 48, 130, 161, 101, 58, 231, 86, 173, 155, 158, 186, 185, 151, 171, 222, 245, 156, 104, 146, 252, 174, 40, 52, 144, 37, 251, 129, 7, 75, 6, 126, 106, 3, 166, 4, 203, 15, 190, 78, 69, 235, 159, 6, 0, 252, 204, 118, 13, 123, 142, 83, 163, 59, 13, 76, 131, 231, 91, 70, 190, 98, 123, 27, 161, 184, 142, 152, 172, 112, 93, 48, 7, 181, 127, 51, 23, 191, 157, 186, 48, 204, 4, 233, 17, 69, 167, 132, 18, 92, 114, 8, 198, 184, 14, 191, 189, 136, 172, 179, 137, 164, 2, 241, 208, 113, 97, 255, 250, 124, 204, 68, 138, 27, 241, 21, 121, 49, 250, 135, 84, 166, 246, 93, 39, 70, 64, 141, 228, 134, 50, 83, 31, 196, 139, 178, 255, 57, 53, 65, 204, 245, 18, 39, 190, 159, 65, 193, 244, 8, 224, 133, 244, 178, 94, 52, 74, 210, 104, 61, 94, 72, 65, 8, 200, 188, 129, 96, 145, 128, 88, 46, 60, 22, 27, 219, 15, 83, 166, 99, 81, 150, 167, 187, 37, 175, 199, 146, 209, 201, 13, 107, 211, 130, 225, 142, 57, 157, 90, 61, 176, 39, 38, 82},
	}
	certIDs := []*common.SHA256Output{(*common.SHA256Output)([]byte{23, 159, 188, 20, 138, 61, 208, 15, 210, 78, 161, 52, 88, 204, 67, 191, 167, 245, 156, 129, 130, 215, 131, 165, 19, 246, 235, 236, 16, 12, 137, 36}), (*common.SHA256Output)([]byte{67, 72, 160, 233, 68, 76, 120, 203, 38, 94, 5, 141, 94, 137, 68, 180, 216, 79, 150, 98, 189, 38, 219, 37, 127, 137, 52, 164, 67, 199, 1, 97}), (*common.SHA256Output)([]byte{77, 111, 228, 35, 18, 14, 208, 83, 116, 108, 172, 190, 38, 97, 152, 202, 182, 56, 170, 45, 10, 3, 176, 60, 129, 120, 171, 23, 38, 61, 135, 55}), (*common.SHA256Output)([]byte{100, 154, 15, 78, 67, 65, 106, 135, 91, 97, 203, 46, 126, 194, 196, 166, 103, 4, 195, 98, 193, 54, 192, 45, 174, 229, 17, 21, 94, 61, 154, 90}), (*common.SHA256Output)([]byte{103, 103, 156, 178, 106, 110, 237, 118, 230, 107, 141, 28, 3, 191, 60, 179, 94, 177, 151, 191, 60, 183, 128, 31, 189, 154, 43, 170, 114, 140, 84, 147}), (*common.SHA256Output)([]byte{112, 245, 10, 10, 14, 57, 103, 124, 13, 25, 22, 37, 189, 217, 219, 47, 31, 228, 35, 133, 68, 2, 177, 39, 175, 114, 26, 252, 131, 148, 130, 224}), (*common.SHA256Output)([]byte{135, 199, 21, 83, 68, 94, 179, 195, 60, 62, 7, 16, 113, 27, 153, 233, 199, 119, 63, 4, 217, 26, 195, 138, 159, 76, 8, 46, 226, 65, 1, 234}), (*common.SHA256Output)([]byte{166, 108, 151, 174, 89, 223, 249, 234, 1, 94, 115, 199, 68, 238, 85, 32, 116, 95, 16, 26, 57, 92, 73, 125, 25, 225, 241, 104, 211, 154, 252, 208}), (*common.SHA256Output)([]byte{179, 123, 104, 51, 8, 126, 159, 4, 19, 55, 168, 7, 170, 224, 164, 26, 78, 205, 87, 245, 219, 29, 166, 36, 158, 194, 151, 83, 34, 177, 93, 85}), (*common.SHA256Output)([]byte{182, 118, 255, 163, 23, 158, 136, 18, 9, 58, 27, 94, 175, 238, 135, 106, 231, 166, 170, 242, 49, 7, 141, 173, 27, 251, 33, 205, 40, 147, 118, 74}), (*common.SHA256Output)([]byte{203, 181, 34, 215, 183, 241, 39, 173, 106, 1, 19, 134, 91, 223, 28, 212, 16, 46, 125, 7, 89, 175, 99, 90, 124, 244, 114, 13, 201, 99, 197, 59}), (*common.SHA256Output)([]byte{237, 126, 185, 81, 19, 137, 48, 4, 23, 172, 241, 76, 79, 2, 90, 134, 148, 34, 211, 238, 26, 119, 18, 122, 226, 118, 42, 42, 61, 40, 137, 207})}
	policyIDs := []*common.SHA256Output{(*common.SHA256Output)([]byte{202, 127, 108, 161, 26, 10, 255, 75, 6, 41, 194, 163, 66, 96, 92, 111, 103, 102, 232, 60, 164, 108, 230, 35, 64, 34, 153, 209, 78, 140, 63, 237}), (*common.SHA256Output)([]byte{202, 127, 108, 161, 26, 10, 255, 75, 6, 41, 194, 163, 66, 96, 92, 111, 103, 102, 232, 60, 164, 108, 230, 35, 64, 34, 153, 209, 78, 140, 63, 237}), (*common.SHA256Output)([]byte{202, 127, 108, 161, 26, 10, 255, 75, 6, 41, 194, 163, 66, 96, 92, 111, 103, 102, 232, 60, 164, 108, 230, 35, 64, 34, 153, 209, 78, 140, 63, 237}), (*common.SHA256Output)([]byte{202, 127, 108, 161, 26, 10, 255, 75, 6, 41, 194, 163, 66, 96, 92, 111, 103, 102, 232, 60, 164, 108, 230, 35, 64, 34, 153, 209, 78, 140, 63, 237}), (*common.SHA256Output)([]byte{202, 127, 108, 161, 26, 10, 255, 75, 6, 41, 194, 163, 66, 96, 92, 111, 103, 102, 232, 60, 164, 108, 230, 35, 64, 34, 153, 209, 78, 140, 63, 237}), (*common.SHA256Output)([]byte{202, 127, 108, 161, 26, 10, 255, 75, 6, 41, 194, 163, 66, 96, 92, 111, 103, 102, 232, 60, 164, 108, 230, 35, 64, 34, 153, 209, 78, 140, 63, 237}), (*common.SHA256Output)([]byte{202, 127, 108, 161, 26, 10, 255, 75, 6, 41, 194, 163, 66, 96, 92, 111, 103, 102, 232, 60, 164, 108, 230, 35, 64, 34, 153, 209, 78, 140, 63, 237}), (*common.SHA256Output)([]byte{202, 127, 108, 161, 26, 10, 255, 75, 6, 41, 194, 163, 66, 96, 92, 111, 103, 102, 232, 60, 164, 108, 230, 35, 64, 34, 153, 209, 78, 140, 63, 237}), (*common.SHA256Output)([]byte{202, 127, 108, 161, 26, 10, 255, 75, 6, 41, 194, 163, 66, 96, 92, 111, 103, 102, 232, 60, 164, 108, 230, 35, 64, 34, 153, 209, 78, 140, 63, 237}), (*common.SHA256Output)([]byte{202, 127, 108, 161, 26, 10, 255, 75, 6, 41, 194, 163, 66, 96, 92, 111, 103, 102, 232, 60, 164, 108, 230, 35, 64, 34, 153, 209, 78, 140, 63, 237}), (*common.SHA256Output)([]byte{202, 127, 108, 161, 26, 10, 255, 75, 6, 41, 194, 163, 66, 96, 92, 111, 103, 102, 232, 60, 164, 108, 230, 35, 64, 34, 153, 209, 78, 140, 63, 237}), (*common.SHA256Output)([]byte{202, 127, 108, 161, 26, 10, 255, 75, 6, 41, 194, 163, 66, 96, 92, 111, 103, 102, 232, 60, 164, 108, 230, 35, 64, 34, 153, 209, 78, 140, 63, 237})}
	return response, certIDs, policyIDs
}
